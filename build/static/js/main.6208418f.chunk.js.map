{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["moment","require","locale","startOfWeek","startOf","format","endOfWeek","endOf","List","className","this","props","data","map","entry","key","id","parseZone","date_start","toString","duration_minute","coach","activity","establishment","React","Component","Filter","day","type","onClick","value","Calendar","state","isdataSet","filter","fetch","then","res","json","result","forEach","item","push","setState","i","weekday","k","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6208418f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'moment/locale/fr'  // without this line it didn't work\n\nvar moment = require('moment');\nmoment.locale('fr');         // fr\n\nvar startOfWeek = moment().startOf('isoweek').format(\"YYYY-MM-DD\");\nvar endOfWeek   = moment().endOf('isoweek').format(\"YYYY-MM-DD\");\n\n\nclass List extends React.Component{ //display list of events from props.data\n    render() {\n        return (\n            <ul className=\"list-group\">\n                {this.props.data.map(entry => <li key={entry.id} className=\"list-group-item\">\n                    <h6>Date : {moment.parseZone(entry.date_start).format(\"dddd à  kk:mm\").toString()}</h6>\n                    <small>Durée en minute : {entry.duration_minute}</small>\n                    <br></br>\n                    <small>Coach : {entry.coach}</small><small> | Activité : {entry.activity}</small><small> |\n                    Établissement : {entry.establishment}</small>\n\n                </li>)}\n            </ul>\n        );\n    }\n}\nclass Filter extends React.Component{ //Filter button for a certain day\n\n    render() {\n\n        if(this.props.day === -1){\n            return <button type=\"button\" className=\"btn btn-outline-danger\"  onClick={() => this.props.onClick()}>{this.props.value}</button>;\n        }\n        else   {\n            return <button type=\"button\" className=\"btn btn-outline-primary\"  onClick={() => this.props.onClick()}>{this.props.value}</button>;\n\n        }\n\n    }\n}\n\nclass Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        data:[],\n        isdataSet : false,\n        filter : -1,\n    }\n  }\n  componentDidMount() {\n      fetch(\"https://back.staging.bsport.io/api/v1/offer/?company=6&min_date=\"+startOfWeek + \"&max_date=\"+endOfWeek)\n          .then(res => res.json())\n          .then(\n              (result) => {\n                  var res = [];\n                  result[\"results\"].forEach((item) => res.push(item));\n                  this.setState({\"data\": res, \"isdataSet\":true});\n              });\n  }\n\n    filter(i){\n      this.setState({filter: i});\n  }\n   render() {\n       if(this.state.isdataSet){\n           var res = [];\n           if(this.state.filter >= 0){\n               this.state.data.forEach((item) => {\n                   if(moment(item.date_start).weekday() === this.state.filter) res.push(item);\n               });\n           }\n           else res = this.state.data;\n           return (\n               <div className=\"container\">\n                   <div className=\"row justify-content-md-center\">\n                       <div className=\"col-7\">\n                           <h2>Séléctionnez un jour pour voir les séances correspondantes</h2>\n                           <h6>Le calendrier montre les séances de la semaine actuelle</h6>\n                           <br></br>\n                           <div className=\"text-center\">\n                           <Filter onClick={() => this.filter(0)} value={\"Lundi\"} ></Filter>\n                           <Filter onClick={() => this.filter(1)} value={\"Mardi\"} ></Filter>\n                           <Filter onClick={() => this.filter(2)} value={\"Mercredi\"} ></Filter>\n                           <Filter onClick={() =>this.filter(3)} value={\"Jeudi\"} ></Filter>\n                           <Filter onClick={() => this.filter(4)} value={\"Venredi\"} ></Filter>\n                           <Filter onClick={() => this.filter(5)} value={\"Samedi\"} k></Filter>\n                               <Filter onClick={() => this.filter(6)} value={\"Dimanche\"} ></Filter><br></br>\n                           <Filter onClick={() => this.filter(-1)} value={\"Désactiver le filtre\"} day={-1} ></Filter>\n                           </div>\n                       </div>\n                       <div className=\"col-4\">\n                           <List data={res}/>\n                       </div>\n\n                   </div>\n               </div>\n           );\n      }\n       else return \"Loading...\";\n\n  }\n\n}\n\n\nexport default Calendar;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}